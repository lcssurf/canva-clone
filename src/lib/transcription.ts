'use server'

import { GoogleGenAI, createUserContent } from "@google/genai";
import { InstagramPost } from "@/content/crawler";

const genAI = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY! });

class FileTooLargeError extends Error {
    constructor(message: string) {
        super(message);
        this.name = "FileTooLargeError";
    }
}

interface TranscriptionResult {
    success: boolean;
    transcriptions: Record<string, string[]>;
    failedPosts: string[];
    errors?: string[];
}

interface TranscriptionProgress {
    completed: number;
    total: number;
    currentPost?: string;
}

async function fetchAndConvertToBase64(url: string) {
    const head = await fetch(url, { method: "HEAD" });
    if (!head.ok) {
        throw new Error(`Erro ao acessar cabe√ßalho do arquivo: ${url}`);
    }

    const contentLength = head.headers.get("content-length");
    const contentType = head.headers.get("content-type") || "";

    if (
        !contentType.startsWith("image/") &&
        !contentType.startsWith("video/")
    ) {
        throw new Error(`Tipo de conte√∫do inv√°lido: ${contentType}`);
    }

    if (contentLength && Number(contentLength) > 20 * 1024 * 1024) {
        throw new FileTooLargeError(
            `Arquivo muito grande (${(Number(contentLength) / 1024 / 1024).toFixed(2)} MB).`,
        );
    }

    const res = await fetch(url);
    if (!res.ok) {
        throw new Error(`Erro ao baixar arquivo: ${url}`);
    }
    const buffer = await res.arrayBuffer();
    const base64 = Buffer.from(buffer).toString("base64");
    return { base64, mimeType: contentType };
}

async function transcribeMedia(imageUrl?: string, videoUrl?: string): Promise<string | null> {
    const MAX_ATTEMPTS = 3;
    const DELAY_BETWEEN_ATTEMPTS = 1000;
    
    if (!imageUrl && !videoUrl) {
        return null;
    }

    let attempt = 0;
    
    while (attempt < MAX_ATTEMPTS) {
        attempt++;
        try {
            const parts: Array<
                | { inlineData: { mimeType: string; data: string } }
                | { text: string }
            > = [];

            if (imageUrl) {
                const base64Image = await fetchAndConvertToBase64(imageUrl);
                
                parts.push({
                    inlineData: {
                        mimeType: base64Image.mimeType,
                        data: base64Image.base64,
                    },
                });

                parts.push({
                    text: `<system_prompt>
VOC√ä √â UM ANALISTA VISUAL ALTAMENTE TREINADO, ESPECIALISTA EM DESCRI√á√ÉO DE IMAGENS, AN√ÅLISE DE ELEMENTOS VISUAIS, INTERPRETA√á√ÉO DE EMO√á√ïES, E DETALHES T√âCNICOS DE PRODU√á√ÉO. SUA MISS√ÉO √â REALIZAR UMA AN√ÅLISE EXCEPCIONALMENTE DETALHADA, OBJETIVA E ORGANIZADA DE UMA IMAGEM FORNECIDA.

### INSTRU√á√ïES ###

- DESCREVA COM M√ÅXIMA PRECIS√ÉO:
  - ELEMENTOS VISUAIS PRINCIPAIS (ex.: pessoas, objetos, animais, paisagens, s√≠mbolos)
  - EMO√á√ïES PERCEBIDAS nas express√µes corporais e faciais (ex.: felicidade, concentra√ß√£o, tens√£o)
  - CEN√ÅRIO E AMBIENTE (ex.: interno, externo, natureza, cidade, est√∫dio, fundo neutro)
  - ESTILO VISUAL (ex.: paleta de cores predominantes, tipo e intensidade da ilumina√ß√£o, atmosfera da imagem, qualidade e estilo da captura - amadora, profissional, art√≠stica)

- REALIZE UMA AN√ÅLISE T√âCNICA:
  - QUALIDADE DA IMAGEM (ex.: n√≠tida, desfocada, pixelada)
  - ILUMINA√á√ÉO (ex.: natural, artificial, luz suave, luz dura)
  - COMPOSI√á√ÉO (ex.: regra dos ter√ßos, centraliza√ß√£o, uso de profundidade)
  - TIPOS DE PLANO E ENQUADRAMENTO (ex.: close-up, plano geral, plong√©e, contra-plong√©e)
  - EDI√á√ÉO E P√ìS-PRODU√á√ÉO (ex.: filtros aplicados, retoques, manipula√ß√£o digital)

- FA√áA UMA AN√ÅLISE DA MENSAGEM E PROP√ìSITO:
  - IDENTIFIQUE a MENSAGEM OU TEMA CENTRAL sugerido pela imagem
  - DESCREVA o TOM E A ESTRAT√âGIA VISUAL utilizada (ex.: emocional, comercial, institucional, art√≠stica)
  - DETECTE IND√çCIOS DE INTEN√á√ÉO COMUNICATIVA (ex.: chamada √† a√ß√£o impl√≠cita, sensibiliza√ß√£o, promo√ß√£o)

### CAUTELAS ESSENCIAIS ###

- BASEIE-SE EXCLUSIVAMENTE no que est√° vis√≠vel na imagem
- N√ÉO FA√áA SUPOSI√á√ïES SOBRE CONTEXTO EXTERNO ou INTEN√á√ïES N√ÉO VISUALMENTE EVIDENTES
- EVITE INTERPRETA√á√ïES SUBJETIVAS ou JULGAMENTOS PESSOAIS sobre est√©tica ou qualidade art√≠stica
- DESCREVA DETALHADAMENTE TODOS OS ELEMENTOS RELEVANTES, mesmo os aparentemente secund√°rios
</system_prompt>`,
                });
            } else if (videoUrl) {
                const base64Video = await fetchAndConvertToBase64(videoUrl);
                
                parts.push({
                    inlineData: {
                        mimeType: base64Video.mimeType,
                        data: base64Video.base64,
                    },
                });

                parts.push({
                    text: `<system_prompt>
VOC√ä √â UM ANALISTA DE V√çDEOS ALTAMENTE TREINADO, ESPECIALISTA EM TRANSCRI√á√ÉO, DESCRI√á√ÉO VISUAL, AN√ÅLISE DE √ÅUDIO, MENSAGEM, E DETALHES T√âCNICOS. SUA MISS√ÉO √â REALIZAR UMA AN√ÅLISE EXCEPCIONALMENTE DETALHADA, OBJETIVA E ORGANIZADA DE UM V√çDEO FORNECIDO.

### INSTRU√á√ïES ###

- EXECUTE uma TRANSCRI√á√ÉO COMPLETA do v√≠deo, INCLUINDO:
  - MARCA√á√ÉO PRECISA DE TEMPO (timestamps a cada 5 segundos ou a cada troca de fala/cena)
  - IDENTIFICA√á√ÉO DO TOM DE VOZ de cada fala (ex.: alegre, s√©rio, tenso, calmo)

- DESCREVA com RIGOR VISUAL:
  - EMO√á√ïES PERCEBIDAS nas express√µes corporais e faciais (ex.: felicidade, concentra√ß√£o, tens√£o)
  - CEN√ÅRIO E AMBIENTE (ex.: interno, externo, natureza, cidade, gin√°sio, est√∫dio, etc.)
  - ESTILO VISUAL (ex.: paleta de cores predominantes, tipo e intensidade de ilumina√ß√£o, atmosfera do local, qualidade e estilo da grava√ß√£o - amadora, profissional, documental)

- REALIZE UMA AN√ÅLISE DE √ÅUDIO:
  - QUALIDADE do √°udio (ex.: limpo, com ru√≠do, distorcido)
  - ELEMENTOS SONOROS presentes (ex.: m√∫sica de fundo, efeitos sonoros, ru√≠dos ambientes)
  - VOLUME e CLAREZA da fala e trilha sonora

- FA√áA UMA AN√ÅLISE DE COPY/MENSAGEM:
  - IDENTIFIQUE os PRINCIPAIS PONTOS da mensagem verbal
  - DESCREVA o TOM e a ESTRAT√âGIA DE COMUNICA√á√ÉO (ex.: persuasivo, informativo, emocional, institucional)
  - DETECTE CHAMADAS √Ä A√á√ÉO (se houver)

- ESTRUTURE O DESENVOLVIMENTO DO V√çDEO:
  - RELATE CRONOLOGICAMENTE a SEQU√äNCIA DE ACONTECIMENTOS
  - DETALHE o QUE ACONTECE em cada momento-chave
  - FA√áA UM MAPEAMENTO DA EVOLU√á√ÉO VISUAL e NARRATIVA
</system_prompt>`,
                });
            }

            const result = await genAI.models.generateContent({
                model: "gemini-2.0-flash-lite",
                contents: createUserContent(parts),
            });

            const text = result.text;
            
            if (text) {
                return text;
            } else {
                throw new Error("Resposta sem transcri√ß√£o");
            }
            
        } catch (error: any) {
            console.error(`Erro ao transcrever (tentativa ${attempt}):`, error);
            
            if (error instanceof FileTooLargeError) {
                return "Arquivo muito grande para transcri√ß√£o.";
            }

            if (attempt < MAX_ATTEMPTS) {
                await new Promise((resolve) => setTimeout(resolve, DELAY_BETWEEN_ATTEMPTS));
            }
        }
    }

    return null;
}

function normalizePostMedia(post: InstagramPost) {
    const images: string[] = [];
    let video: string | undefined = undefined;

    if (post?.reel) {
        return { images, video: post.videoURL };
    }

    if (post?.images?.length === 1) {
        if (post.images[0]) {
            images.push(post.images[0]);
        }
    } else if (post?.images?.length > 1) {
        for (const photo of post.images) {
            if (photo) {
                images.push(photo);
            }
        }
    }

    return { images, video };
}

export async function transcribePosts(
    posts: InstagramPost[],
    batchSize: number = 3,
    onProgress?: (progress: TranscriptionProgress) => void
): Promise<TranscriptionResult> {
    console.log("üìÑ Iniciando transcri√ß√£o de posts:", posts.length);
    
    if (posts.length === 0) {
        console.warn("Nenhum post selecionado para transcri√ß√£o.");
        return {
            success: false,
            transcriptions: {},
            failedPosts: [],
            errors: ["Nenhum post selecionado para transcri√ß√£o."],
        };
    }

    console.log("üìÑ Posts selecionados para transcri√ß√£o:", posts.map((p) => p.url).join(", "));

    const transcriptionResults: Record<string, string[]> = {};
    const failed: string[] = [];
    const errors: string[] = [];
    let completed = 0;

    // Processa em batches para evitar sobrecarga
    for (let i = 0; i < posts.length; i += batchSize) {
        const batch = posts.slice(i, i + batchSize);
        const batchPromises = batch.map(async (post) => {
            try {
                onProgress?.({ 
                    completed, 
                    total: posts.length, 
                    currentPost: post.url 
                });

                const { images, video } = normalizePostMedia(post);
                const postTranscriptions: string[] = [];

                if (video) {
                    const transcription = await transcribeMedia(undefined, video);
                    if (transcription && transcription !== "Arquivo muito grande para transcri√ß√£o.") {
                        postTranscriptions.push(transcription);
                    } else {
                        failed.push(post.url);
                        if (transcription === "Arquivo muito grande para transcri√ß√£o.") {
                            errors.push(`Post ${post.url}: Arquivo de v√≠deo muito grande`);
                        } else {
                            errors.push(`Post ${post.url}: Falha na transcri√ß√£o do v√≠deo`);
                        }
                    }
                } else if (images.length > 0) {
                    for (const imageUrl of images) {
                        const transcription = await transcribeMedia(imageUrl, undefined);
                        if (transcription && transcription !== "Arquivo muito grande para transcri√ß√£o.") {
                            postTranscriptions.push(transcription);
                        } else {
                            console.warn(`Imagem falhou: ${imageUrl}`);
                            if (transcription === "Arquivo muito grande para transcri√ß√£o.") {
                                errors.push(`Post ${post.url}: Imagem muito grande - ${imageUrl}`);
                            }
                        }
                    }
                } else {
                    console.warn(`Post sem m√≠dia utiliz√°vel: ${post.url}`);
                    failed.push(post.url);
                    errors.push(`Post ${post.url}: Sem m√≠dia utiliz√°vel`);
                }

                if (postTranscriptions.length > 0) {
                    transcriptionResults[post.url] = postTranscriptions;
                } else if (!failed.includes(post.url)) {
                    failed.push(post.url);
                    errors.push(`Post ${post.url}: Nenhuma transcri√ß√£o obtida`);
                }

                completed++;
                onProgress?.({ completed, total: posts.length });

            } catch (error: any) {
                console.error(`Erro ao processar post ${post.url}:`, error);
                failed.push(post.url);
                errors.push(`Post ${post.url}: ${error.message}`);
                completed++;
                onProgress?.({ completed, total: posts.length });
            }
        });

        // Aguarda o batch atual antes de processar o pr√≥ximo
        await Promise.all(batchPromises);
    }

    const success = Object.keys(transcriptionResults).length > 0;

    console.log(`‚úÖ Transcri√ß√£o conclu√≠da. Sucessos: ${Object.keys(transcriptionResults).length}, Falhas: ${failed.length}`);

    return {
        success,
        transcriptions: transcriptionResults,
        failedPosts: failed,
        errors: errors.length > 0 ? errors : undefined,
    };
}