// üöÄ FUN√á√ÉO MELHORADA - Suporta m√∫ltiplos formatos de texto
export const processCarouselContent = (content: any, options: {
  maxCards?: number;
  unlimited?: boolean;
} = {}): string[] => {
  const { 
    maxCards = 15, 
    unlimited = false 
  } = options;
  
  const cards: string[] = [];

  // 1. Adicionar headline como primeiro card
  if (content.headline && content.headline.trim()) {
    cards.push(content.headline.trim());
  }

  // 2. Processar os cards do conte√∫do com m√∫ltiplas estrat√©gias
  if (content.cards && typeof content.cards === 'string') {
    let rawText = content.cards.trim();
    
    // üéØ ESTRAT√âGIA 1: Detectar se o texto j√° vem com separadores "texto X -"
    const hasTextPattern = /texto\s+\d+\s*[-‚Äì‚Äî]\s*/i.test(rawText);
    
    let cardsText: string[] = [];
    
    if (hasTextPattern) {
      // ‚úÇÔ∏è CASO 1: Texto com padr√£o "texto X -" 
      cardsText = rawText
        .split(/(?=texto\s+\d+\s*[-‚Äì‚Äî]\s*)/i) // Split no in√≠cio de cada "texto X -"
        .map(chunk => chunk.trim())
        .filter(chunk => chunk.length > 0)
        .map(chunk => {
          // Remove o prefixo "texto X -"
          return chunk.replace(/^texto\s+\d+\s*[-‚Äì‚Äî]\s*/i, '').trim();
        });
    } else {
      // ‚úÇÔ∏è CASO 2: Texto livre - tentar detectar separadores naturais
      
      // Detectar padr√µes de numera√ß√£o/bullets
      const hasNumbering = /^\d+[\.\)]\s+/m.test(rawText);
      const hasBullets = /^[-‚Äì‚Äî‚Ä¢*]\s+/m.test(rawText);
      const hasDoubleLineBreaks = /\n\s*\n/.test(rawText);
      
      if (hasNumbering) {
        // Split por numera√ß√£o (1. 2. 3. ou 1) 2) 3))
        cardsText = rawText
          .split(/(?=^\d+[\.\)]\s+)/m)
          .map(chunk => chunk.trim())
          .filter(chunk => chunk.length > 0)
          .map(chunk => chunk.replace(/^\d+[\.\)]\s+/, '').trim());
          
      } else if (hasBullets) {
        // Split por bullets (- ‚Ä¢ * etc)
        cardsText = rawText
          .split(/(?=^[-‚Äì‚Äî‚Ä¢*]\s+)/m)
          .map(chunk => chunk.trim())
          .filter(chunk => chunk.length > 0)
          .map(chunk => chunk.replace(/^[-‚Äì‚Äî‚Ä¢*]\s+/, '').trim());
          
      } else if (hasDoubleLineBreaks) {
        // Split por dupla quebra de linha (par√°grafos)
        cardsText = rawText
          .split(/\n\s*\n/)
          .map(chunk => chunk.trim())
          .filter(chunk => chunk.length > 0);
          
      } else {
        // ‚úÇÔ∏è CASO 3: Texto corrido - dividir por frases/senten√ßas
        cardsText = smartSentenceSplit(rawText);
      }
    }

    // üßπ LIMPEZA FINAL - aplicar a todos os casos
    const cleanedCards = cardsText
      .map(text => text.trim())
      .filter(text => text.length > 15) // Aumentei de 10 para 15 caracteres
      .map(text => {
        // Limpar restos de formata√ß√£o
        return text
          .replace(/^[-‚Äì‚Äî‚Ä¢*]\s*/, '') // Remove bullets restantes
          .replace(/^\d+[\.\)]\s*/, '') // Remove numera√ß√£o restante
          .replace(/\s+/g, ' ') // Normaliza espa√ßos m√∫ltiplos
          .trim();
      })
      .filter(text => text.length > 15); // Filtro final

    cards.push(...cleanedCards);
  }

  // ‚úÖ VALIDA√á√ÉO: Garantir que temos pelo menos 1 card
  if (cards.length === 0) {
    cards.push('Conte√∫do do carrossel');
  }

  // üîß AJUSTE: Limite mais flex√≠vel baseado no conte√∫do
  let finalCards = cards;
  
  if (!unlimited && cards.length > maxCards) {
    console.warn(`‚ö†Ô∏è Muitos cards detectados (${cards.length}). Selecionando os ${maxCards} melhores.`);
    
    // Ordenar por qualidade/tamanho e pegar os melhores
    finalCards = cards
      .map((card, index) => ({
        content: card,
        originalIndex: index,
        score: calculateCardScore(card, index)
      }))
      .sort((a, b) => b.score - a.score) // Maior score primeiro
      .slice(0, maxCards)
      .sort((a, b) => a.originalIndex - b.originalIndex) // Restaurar ordem original
      .map(item => item.content);
  }

  console.log(`üìù Processados ${finalCards.length} cards (${unlimited ? 'sem limite' : `m√°x: ${maxCards}`}):`, 
    finalCards.map((c, i) => `${i + 1}. ${c.substring(0, 50)}...`)
  );

  return finalCards;
};

// üß† FUN√á√ÉO AUXILIAR: Calcular qualidade do card
function calculateCardScore(card: string, index: number): number {
  let score = 0;
  
  // Pontua√ß√£o base por tamanho (cards muito curtos ou muito longos perdem pontos)
  const length = card.length;
  if (length >= 50 && length <= 300) {
    score += 10; // Tamanho ideal
  } else if (length >= 30 && length <= 400) {
    score += 7; // Tamanho aceit√°vel
  } else if (length < 30) {
    score += 2; // Muito curto
  } else {
    score += 5; // Muito longo
  }
  
  // Pontua√ß√£o por posi√ß√£o (primeiros cards s√£o mais importantes)
  if (index <= 2) score += 5; // Primeiros 3 cards
  else if (index <= 5) score += 3; // Cards intermedi√°rios
  else score += 1; // Cards finais
  
  // Pontua√ß√£o por conte√∫do
  if (card.includes('?') || card.includes('!')) score += 2; // Perguntas/exclama√ß√µes s√£o engajantes
  if (/\b(como|por que|qual|quando|onde)\b/i.test(card)) score += 3; // Palavras questionadoras
  if (/\b(dica|segredo|m√©todo|estrat√©gia|passo)\b/i.test(card)) score += 2; // Palavras de valor
  
  // Penalizar repeti√ß√£o de palavras muito comum
  const commonWords = ['o', 'a', 'de', 'para', 'com', 'em', '√©', 'do', 'da'];
  const wordCount = card.split(' ').length;
  const uniqueWords = new Set(card.toLowerCase().split(' ').filter(w => !commonWords.includes(w))).size;
  const diversity = uniqueWords / wordCount;
  score += Math.floor(diversity * 5); // Bonifica√ß√£o por diversidade de vocabul√°rio
  
  return score;
}
function smartSentenceSplit(text: string): string[] {
  // Dividir por pontos, exclama√ß√µes, interroga√ß√µes, mas preservar abrevia√ß√µes
  const sentences = text
    .split(/(?<=[.!?])\s+(?=[A-Z√Å√ä√á√ï])/) // Split ap√≥s pontua√ß√£o + espa√ßo + letra mai√∫scula
    .map(s => s.trim())
    .filter(s => s.length > 20); // Senten√ßas muito curtas s√£o ignoradas
  
  // Se as senten√ßas ficaram muito longas, tentar agrupar em chunks menores
  const chunks: string[] = [];
  
  for (const sentence of sentences) {
    if (sentence.length > 200) {
      // Quebrar senten√ßas muito longas em v√≠rgulas ou pontos e v√≠rgulas
      const subChunks = sentence
        .split(/[,;]\s+/)
        .reduce((acc: string[], chunk, index, array) => {
          if (chunk.length > 100) {
            acc.push(chunk.trim());
          } else {
            // Agrupar chunks pequenos
            const lastIndex = acc.length - 1;
            if (lastIndex >= 0 && (acc[lastIndex].length + chunk.length) < 180) {
              acc[lastIndex] += ', ' + chunk.trim();
            } else {
              acc.push(chunk.trim());
            }
          }
          return acc;
        }, []);
      
      chunks.push(...subChunks);
    } else {
      chunks.push(sentence);
    }
  }
  
  return chunks.filter(chunk => chunk.length > 15);
}

// üß™ TESTE COM SEU EXEMPLO:
const exemploTexto = `O SEGREDO POR TR√ÅS DE CRIAN√áAS QUE AMAM ROCK A REVOLU√á√ÉO SILENCIOSAtexto 1 - Seu filho ignora o rock aut√™ntico?texto 2 - A maioria dos pais falha ao apresentar esse universo musical.texto 3 - Desvendamos por que a energia aut√™ntica do rock √© vital para o crescimento infantil, indo al√©m de ritmos e formando mentes curiosas.texto 4 - N√£o √© s√≥ volume; √© a estrutura mel√≥dica e l√≠rica que ativa um fasc√≠nio primitivo e duradouro na crian√ßa.texto 5 - Muitos educadores subestimam o rock como ensino. Focam s√≥ em g√™neros 'infantis', limitando a cultura. Erram ao n√£o explorar a riqueza e variedade de subg√™neros. Perdem a chance de formar senso cr√≠tico. √â uma perda de mente e criatividade, afastando crian√ßas de um legado que define gera√ß√µes e move a express√£o. A prova √© clara: adultos crescem mais conscientes ouvindo rock.texto 6 - Mas existe um m√©todo testado e comprovado para essa imers√£o.texto 7 - Comece com os pilares. Queen e The Beatles, por exemplo, d√£o melodias vician`;

// RESULTADO ESPERADO:
// [
//   "O SEGREDO POR TR√ÅS DE CRIAN√áAS QUE AMAM ROCK A REVOLU√á√ÉO SILENCIOSA",
//   "Seu filho ignora o rock aut√™ntico?",
//   "A maioria dos pais falha ao apresentar esse universo musical.",
//   "Desvendamos por que a energia aut√™ntica do rock √© vital para o crescimento infantil, indo al√©m de ritmos e formando mentes curiosas.",
//   "N√£o √© s√≥ volume; √© a estrutura mel√≥dica e l√≠rica que ativa um fasc√≠nio primitivo e duradouro na crian√ßa.",
//   "Muitos educadores subestimam o rock como ensino. Focam s√≥ em g√™neros 'infantis', limitando a cultura. Erram ao n√£o explorar a riqueza e variedade de subg√™neros.",
//   "Mas existe um m√©todo testado e comprovado para essa imers√£o.",
//   "Comece com os pilares. Queen e The Beatles, por exemplo, d√£o melodias vician"
// ]